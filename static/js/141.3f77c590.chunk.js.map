{"version":3,"file":"static/js/141.3f77c590.chunk.js","mappings":"oMAEaA,EAAeC,EAAAA,EAAAA,OAAH,gzD,mBCezB,EAbe,WACb,IAAQC,GAAMC,EAAAA,EAAAA,KAAND,EACR,OACE,UAACF,EAAD,CAAcI,KAAK,SAAnB,WACE,qBACA,qBACA,qBACA,oBACCF,EAAE,SAGR,ECbYG,EAAYJ,EAAAA,EAAAA,MAAH,+HAOTK,EAAYL,EAAAA,EAAAA,MAAH,qrBCatB,EAnBc,SAACM,GACb,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACPP,GAAMC,EAAAA,EAAAA,KAAND,EACR,OACE,UAACG,EAAD,WACGH,EAAE,UACH,SAACI,EAAD,CACEF,KAAK,OACLM,KAAK,OACLD,SAAUA,EACVD,MAAOA,EACPG,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,MAIf,ECGD,EApBoB,SAACN,GACnB,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACPP,GAAMC,EAAAA,EAAAA,KAAND,EAER,OACE,UAACG,EAAD,WACGH,EAAE,WACH,SAACI,EAAD,CACEF,KAAK,MACLM,KAAK,SACLD,SAAUA,EACVD,MAAOA,EACPG,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,MAIf,ECnBYC,EAAOb,EAAAA,EAAAA,KAAH,uuC,wCCyEjB,I,EAAA,EA9DA,WACE,OAAwBc,EAAAA,EAAAA,UAAS,IAAjC,eAAOL,EAAP,KAAaM,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOE,EAAP,KAAeC,EAAf,KAEMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAEvBC,GAAWC,EAAAA,EAAAA,MAGXC,EAAe,SAACC,GACpB,MAAwBA,EAAEC,cAAlBhB,EAAR,EAAQA,KAAMF,EAAd,EAAcA,MACd,OAAQE,GACN,IAAK,OACHM,EAAQR,GACR,MAEF,IAAK,SACHU,EAAUV,GACV,MAEF,QACE,OAEL,EA0BKmB,EAAQ,WACZX,EAAQ,IACRE,EAAU,GACX,EACD,OACE,UAACJ,EAAD,CAAMc,SA7Ba,SAACH,GACpBA,EAAEI,iBACF,IAAMC,EAAwB,CAAEpB,KAAAA,EAAMO,OAAAA,EAAQc,GAAI,IAC5CC,EAASP,EAAEO,OAUjB,GANAF,EAASpB,KAAOsB,EAAOtB,KAAKF,MAC5BsB,EAASb,OAASe,EAAOf,OAAOT,MAChCsB,EAASC,GC5BO,eAACE,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CD4BFG,GACEtB,EAASuB,MACvB,SAACC,GAAD,OAAsBb,EAASpB,OAASiC,EAAYjC,IAApD,IAKA,OAFAkC,EAAAA,GAAAA,MAAY,oBACZjB,IAGFL,GAASuB,EAAAA,EAAAA,IAAWf,IACpBc,EAAAA,GAAAA,QAAc,WACdjB,GACD,EAQC,WACE,SAACmB,EAAD,CAAWtC,MAAOE,EAAMD,SAAUe,KAClC,SAAC,EAAD,CAAahB,MAAOS,EAAQR,SAAUe,KACtC,SAAC,EAAD,MAGL,EEvEYuB,EAAY9C,EAAAA,EAAAA,IAAH,8FCYtB,G,QATmB,WACjB,OACE,UAAC8C,EAAD,YACE,SAAC,EAAD,KACA,SAAC,KAAD,CAAgBC,UAAW,QAGhC,E","sources":["components/PhoneBookForm/Button/Button.styled.tsx","components/PhoneBookForm/Button/Button.tsx","components/PhoneBookForm/InputName/InputName.styled.tsx","components/PhoneBookForm/InputName/InputName.tsx","components/PhoneBookForm/InputNumber/InputNumber.tsx","components/PhoneBookForm/PhoneBookForm.styled.tsx","components/PhoneBookForm/PhonBookForm.tsx","../node_modules/nanoid/index.browser.js","page/AddContact/AddContacts.styled.tsx","page/AddContact/AddContact.tsx"],"sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const ButtonSubmit = styled.button`\n  background: none;\n  color: inherit;\n  border: none;\n  padding: 0;\n  font: inherit;\n  cursor: pointer;\n  outline: inherit;\n  position: relative;\n  display: inline-block;\n  padding: 15px 10px;\n  margin: 40px 0;\n  font-size: 24px;\n  text-decoration: none;\n  /* text-transform: uppercase; */\n  overflow: hidden;\n  transition: 0.5s;\n  letter-spacing: 3px;\n  border-radius: 8px;\n  /* background: #0052fe; */\n  background-color: rgb(237, 237, 237);\n  box-shadow: 0 1px 3px 0 rgb(60 64 67 / 30%), 0 4px 8px 3px rgb(60 64 67 / 15%);\n  -webkit-box-reflect: below -3px linear-gradient(transparent, #0005);\n  color: black;\n  &:hover {\n    background-color: #03e9f4;\n    color: #050801;\n    box-shadow: 0 0 5px #03e9f4, 0 0 25px #03e9f4, 0 0 50px #03e9f4,\n      0 0 200px #03e9f4;\n  }\n  & span {\n    position: absolute;\n    display: block;\n  }\n  & span:nth-of-type(1) {\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 2px;\n    background: linear-gradient(90deg, transparent, grey);\n    animation: animation1 1s linear infinite;\n    animation-delay: 0.25s;\n  }\n  & span:nth-of-type(2) {\n    top: -100;\n    right: 0%;\n    width: 2px;\n    height: 100%;\n    background: linear-gradient(180deg, transparent, grey);\n    animation: animation2 1s linear infinite;\n    animation-delay: 0.25s;\n  }\n  & span:nth-of-type(3) {\n    bottom: 0;\n    right: -100%;\n    width: 100%;\n    height: 2px;\n    background: linear-gradient(270deg, transparent, grey);\n    animation: animation3 1s linear infinite;\n    animation-delay: 0.5s;\n  }\n  & span:nth-of-type(4) {\n    bottom: -100%;\n    left: 0;\n    width: 2px;\n    height: 100%;\n    background: linear-gradient(360deg, transparent, grey);\n    animation: animation4 1s linear infinite;\n    animation-delay: 0.75s;\n  }\n`;\n","import React from \"react\";\nimport { ButtonSubmit } from \"./Button.styled\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Button = () => {\n  const { t } = useTranslation();\n  return (\n    <ButtonSubmit type=\"submit\">\n      <span></span>\n      <span></span>\n      <span></span>\n      <span></span>\n      {t(\"add\")}\n    </ButtonSubmit>\n  );\n};\n\nexport default Button;\n","import styled from \"@emotion/styled\";\n\nexport const InputWrap = styled.label`\n  display: flex;\n  flex-direction: column;\n  width: 80%;\n  color: var(--text);\n  font-size: 25px;\n`;\nexport const InputBook = styled.input`\n  border: none;\n  border-radius: 8px;\n  display: flex;\n  flex: 0 1 50vw;\n  height: 30px;\n  margin: 12px 0;\n  position: relative;\n  transition: background linear 0.27s, box-shadow linear 0ms 0.27s;\n  white-space: nowrap;\n  background: #fff;\n  box-shadow: 0 1px 3px 0 rgb(60 64 67 / 30%), 0 4px 8px 3px rgb(60 64 67 / 15%);\n  -webkit-box-shadow: 0 10px 6px -6px #777;\n  -moz-box-shadow: 0 10px 6px -6px #777;\n  border: 1px solid rgb(237, 237, 237);\n  /* box-shadow: 0px 5px 10px 0px rgba(0, 255, 255, 0.7); */\n  opacity: 1;\n  visibility: visible;\n  flex-basis: auto;\n  flex-grow: 1;\n  padding-left: 10px;\n  &:focus-visible {\n    outline: none;\n  }\n`;\n","import { InputWrap, InputBook } from \"./InputName.styled\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Input = (props: any) => {\n  const { value, onChange } = props;\n  const { t } = useTranslation();\n  return (\n    <InputWrap>\n      {t(\"names\")}\n      <InputBook\n        type=\"text\"\n        name=\"name\"\n        onChange={onChange}\n        value={value}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </InputWrap>\n  );\n};\n\nexport default Input;\n","import { InputWrap, InputBook } from \"../InputName/InputName.styled\";\nimport { useTranslation } from \"react-i18next\";\n\nconst InputNumber = (props: any) => {\n  const { value, onChange } = props;\n  const { t } = useTranslation();\n\n  return (\n    <InputWrap>\n      {t(\"number\")}\n      <InputBook\n        type=\"tel\"\n        name=\"number\"\n        onChange={onChange}\n        value={value}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n    </InputWrap>\n  );\n};\n\nexport default InputNumber;\n","import styled from \"@emotion/styled\";\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: 10px;\n  width: 60%;\n  /* background-color: rgba(123, 128, 135, 0.5); */\n  /* background-color: rgba(0, 0, 0, 1); */\n  background: var(--form);\n  box-shadow: 0 1px 3px 0 rgb(60 64 67 / 30%), 0 4px 8px 3px rgb(60 64 67 / 15%);\n  /* box-shadow: 0 1px 3px 0 rgb(60 64 67 / 30%), 0 4px 8px 3px rgb(60 64 67 / 15%); */\n  border-radius: 8px;\n  font-family: \"Rampart One\", cursive;\n  position: relative;\n  color: var(--text);\n  &:before,\n  &:after {\n    z-index: -1;\n    position: absolute;\n    content: \"\";\n    bottom: 25px;\n    left: 10px;\n    width: 50%;\n    top: 80%;\n    max-width: 300px;\n    background: #777;\n    -webkit-box-shadow: 0 35px 20px #777;\n    -moz-box-shadow: 0 35px 20px #777;\n    box-shadow: 0 35px 20px #777;\n    -webkit-transform: rotate(-8deg);\n    -moz-transform: rotate(-8deg);\n    -o-transform: rotate(-8deg);\n    -ms-transform: rotate(-8deg);\n    transform: rotate(-8deg);\n  }\n  &:after {\n    -webkit-transform: rotate(8deg);\n    -moz-transform: rotate(8deg);\n    -o-transform: rotate(8deg);\n    -ms-transform: rotate(8deg);\n    transform: rotate(8deg);\n    right: 10px;\n    left: auto;\n  }\n`;\n","import Button from \"./Button\";\nimport InputName from \"./InputName\";\nimport InputNumber from \"./InputNumber\";\nimport { Form } from \"./PhoneBookForm.styled\";\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\nimport { addContact } from \"../../redux/actions\";\nimport { IContactObj } from \"../../interface-ts/interface\";\nimport { toast } from \"react-toastify\";\nimport { getDataItem } from \"../../redux/reducers\";\nimport type { AppDispatch } from \"../../redux/store\";\n\nfunction FormPhonebook() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const contacts = useSelector(getDataItem);\n\n  const dispatch = useDispatch<AppDispatch>();\n\n  // записываем значение инпута по name\n  const handleChange = (e: React.FormEvent<HTMLInputElement>): void => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n  // при сабмите отправляем в App данные для создания обьекта контакта\n  const handleSubmit = (e: React.SyntheticEvent) => {\n    e.preventDefault();\n    const formData: IContactObj = { name, number, id: \"\" };\n    const target = e.target as typeof e.target & {\n      name: { value: string };\n      number: { value: string };\n    };\n    formData.name = target.name.value;\n    formData.number = target.number.value;\n    formData.id = nanoid();\n    const boolean = contacts.some(\n      (nameContact: any) => formData.name === nameContact.name\n    );\n    if (boolean) {\n      toast.error(\"already has\");\n      reset();\n      return;\n    }\n    dispatch(addContact(formData));\n    toast.success(\"success\");\n    reset();\n  };\n\n  // очищаем инпуты\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <InputName value={name} onChange={handleChange} />\n      <InputNumber value={number} onChange={handleChange} />\n      <Button />\n    </Form>\n  );\n}\n\nexport default FormPhonebook;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import FormPhonebook from \"../../components/PhoneBookForm/PhonBookForm\";\nimport { Container } from \"./AddContacts.styled\";\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst AddContact = () => {\n  return (\n    <Container>\n      <FormPhonebook />\n      <ToastContainer autoClose={1000} />\n    </Container>\n  );\n};\n\nexport default AddContact;\n"],"names":["ButtonSubmit","styled","t","useTranslation","type","InputWrap","InputBook","props","value","onChange","name","pattern","title","required","Form","useState","setName","number","setNumber","contacts","useSelector","getDataItem","dispatch","useDispatch","handleChange","e","currentTarget","reset","onSubmit","preventDefault","formData","id","target","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","some","nameContact","toast","addContact","InputName","Container","autoClose"],"sourceRoot":""}